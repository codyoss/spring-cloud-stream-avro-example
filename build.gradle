buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion")
        classpath("org.jetbrains.kotlin:kotlin-allopen:$kotlinVersion")
        classpath("org.springframework.boot:spring-boot-gradle-plugin:$springbootVersion")
        classpath("com.commercehub.gradle.plugin:gradle-avro-plugin:0.16.0")
    }
}

apply plugin: "idea"
apply plugin: "kotlin"
apply plugin: "kotlin-allopen"
apply plugin: "kotlin-spring"
apply plugin: "io.spring.dependency-management"
apply plugin: "com.commercehub.gradle.plugin.avro"


group = "com.github.codyoss"
version = "1.0-SNAPSHOT"
sourceCompatibility = 1.8

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

sourceSets {
    main {
        kotlin.srcDirs += ["src/main/kotlin"]
        java.srcDirs += ["src/main/java"]
    }
    test {
        kotlin.srcDirs += ["src/test/unit/kotlin"]
        resources.srcDir("src/test/unit/resources")
    }
    integration {
        kotlin.srcDirs += ["src/test/integration/kotlin"]
        resources.srcDir("src/test/integration/resources")
        compileClasspath += main.output + test.output
        runtimeClasspath += main.output + test.output
    }
}

configurations {
    integrationImplementation.extendsFrom testImplementation
    integrationRuntime.extendsFrom testRuntime
}

repositories {
    mavenCentral()
    jcenter()
    maven { url("http://packages.confluent.io/maven/") }
}

dependencies {
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
    implementation("org.jetbrains.kotlin:kotlin-reflect")
    implementation("org.springframework.cloud:spring-cloud-starter-stream-kafka:$springCloudVersion")
    implementation("org.apache.avro:avro:$avroVersion")
    implementation("joda-time:joda-time:2.10.1")
    implementation("io.confluent:kafka-streams-avro-serde:5.1.0")
    implementation("org.apache.kafka:kafka-clients:1.1.1")


    testImplementation("org.springframework.cloud:spring-cloud-stream-test-support:$springCloudVersion")
}

task integrationTest(type: Test) {
    testClassesDirs = sourceSets.integration.output.classesDirs
    classpath = sourceSets.integration.runtimeClasspath
}

task generateAvro(type: com.commercehub.gradle.plugin.avro.GenerateAvroJavaTask) {
    source("src/main/avro")
    outputDir = file("src/main/java")
    fieldVisibility = "PRIVATE"
    validateDefaults = true
}

generateAvroJava.enabled = false